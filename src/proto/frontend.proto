syntax="proto2";
// Keep proto3 migration in mind:
// Don't use required.
// Don't use has***() for primitives.
package api;


// Client-Frontend worst connection assumption
// * bandwidth: 1 MB/s
// * latency: 100ms RTT
// * failure rate: once in hour
service FrontendService {
    // Administrative, read-only.
    // Endpoint: /api/biospheres
    rpc Biospheres(BiospheresQ) returns (BiospheresS);

    // Administrative, write.
    // Endpoint: /api/biosphere_delta
    rpc BiosphereDelta(BiosphereDeltaQ) returns (BiospheresS);

    // In-Biosphere fetching
    // Endpoint: /api/chunk
    rpc Chunk(ChunkQ) returns (ChunkS);
}

message BiospheresQ {
}

message BiosphereDeltaQ {
    //
    optional DeltaType type = 1;

    // Default values mean no change.
    // In case of ADD, desc.world_id will be ignored.
    optional BiosphereDesc desc = 2;
}

enum DeltaType {
    MODIFY = 0;
    ADD = 1;
    DELETE = 2;
}

enum BiosphereState {
    RUNNING = 1;
    STOPPED = 2;
    // Transition: STOPPED -> RUNNING.
    T_RUN = 3;
    // Transition: RUNNING -> STOPPED.
    T_STOP = 4;
}

message BiospheresS {
    repeated BiosphereDesc biospheres = 1;
}

message BiosphereDesc {
    optional uint64 biosphere_id = 1;

    // In UI, it is expected name is single-line, possible descriptive string.
    // e.g. "Biosphere:1/NoBC", "HelloBonsai22 - Guests should use this!"
    optional string name = 2;

    // How many cores this world is currently configured to use.
    optional uint32 num_cores = 3;

    // Current timestamp of the world.
    optional uint64 num_ticks = 4;
}



message ChunkQ {
    optional ChunkId cid = 1;
    optional int32 level = 2;

    // Style option should come here.
}

// Target size: 100KB
message ChunkS {
    optional ChunkId cid = 1;

    optional int32 level = 2;

    // Triangle soup with vertex colors. Lights are tonemapped and
    // baked in. Color is in LDR space, not physically accurate in any way.
    optional PolySoup soup = 3;
}

message PolySoup {
}

// This structure is permanent.
// Chunk is 1m * 1m * 10m volume.
message ChunkId {
    // Biosphere-selector.
    optional uint64 world_id = 1;
    optional int32 index_x = 2;
    optional int32 index_y = 3;
}
