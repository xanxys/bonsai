syntax="proto3";
package api;


// Client-Frontend worst connection assumption
// * bandwidth: 1 MB/s
// * latency: 100ms RTT
// * failure rate: once in hour
service FrontendService {
    // Debugging info for entire stack (can break abstraction).
    // Endpoint: /api/debug
    rpc Debug(DebugQ) returns (DebugS);

    // Administrative, read-only.
    // Endpoint: /api/biospheres
    rpc Biospheres(BiospheresQ) returns (BiospheresS);

    // Administrative, write.
    // Endpoint: /api/add_biosphere
    rpc AddBiosphere(AddBiosphereQ) returns (AddBiosphereS);

    // Change execution state of a biosphere.
    // Intentionally kept simple for "emergency shutdown" to reliably work,
    // regardless of other RPCs.
    // Endpoint: /api/change_exec
    rpc ChangeExec(ChangeExecQ) returns (ChangeExecS);

    // Biosphere streaming.
    // Endpoint: /api/biosphere_frames
    rpc BiosphereFrames(BiosphereFramesQ) returns (BiosphereFramesS);
}

// User's authentication information. Some requests requires this to perform
// some operations. Attach them to all requests.
message UserAuth {
    // Google auth API user token id
    // see. https://developers.google.com/identity/sign-in/web/backend-auth
    string id_token = 1;
}

// Error types that are suitable to showing to users, which means:
// * They can be converted to actionable UI.
// When Error is included in response messages, they must be mutually exclusive.
// Response is either:
// 1. OK and contains other fields
// 2. not OK and other fields are garbage
// Exceptions to this rule must be clearly commented.
enum Error {
    // This happens when client is too old.
    // Suggest to refresh the page.
    TOO_OLD_VERSION = 0;

    // User can follow whaterver normal flow.
    OK = 1;

    // Indicates server (including 3rd party backends) failure or system bug.
    // Only thing user can do is randomly retry or wait for a fix.
    // All "shouldn't happen" failures must return this.
    //
    // This includes UI bug: UI that needs authentication must not send requests
    // without id token, for example. Thus, it should result in this error.
    INTERNAL_ERROR = 2;
}

message DebugQ {
    UserAuth auth = 1;
}

message DebugS {

    // Contain error message that is impossible to attribute to each chunk server.
    string chunk_servers_error = 1;

    // Latter entries are always stricter than entries before them.
    enum ChunkServerHealth {
        // The machine shows up in compute engine VM list.
        // This is always true, so this is the default fallback (0).
        ALLOCATED = 0;

        // Possible to create gRPC connection.
        GRPC_OK = 1;

        // Possible to get successful Status RPC response.
        STATUS_OK = 2;
    }

    message ChunkServerState {
        string ip_address = 1;
        // Human-readable state (might be error message when fails to retrieve).
        string state = 2;

        ChunkServerHealth health = 3;

        // Observed RTT (in second) when STATUS_OK.
        float rtt = 4;
    }
    // Returns all known (including running) chunk server descriptions,
    // excluding already terminated chunk servers.
    repeated ChunkServerState chunk_servers = 2;
}


message ChangeExecQ {
    UserAuth auth = 3;

    uint64 biosphere_id = 1;

    enum State {
        // Unknown command is interpreted as STOPPED as safeguard.
        STOPPED = 0;
        RUNNING = 1;
    }
    State target_state = 2;
}

message ChangeExecS {
}


message BiosphereFramesQ {
    UserAuth auth = 4;

    uint64 biosphere_id = 2;

    bytes cont_token = 1;

    reserved 3;
}

// TODO: Level of details sharding
message BiosphereFramesS {
    PolySoup content = 1;
    uint64 content_timestamp = 3;
    bytes cont_token = 2;
}


message BiospheresQ {
    UserAuth auth = 1;
}

message BiospheresS {
    repeated BiosphereDesc biospheres = 1;
}


message AddBiosphereQ {
    // Must always set. Write permission is required even when test_only,
    // to simulate actual effect.
    UserAuth auth = 1;

    // If this is true, just check config validity without actually adding.
    bool test_only = 2;

    BiosphereCreationConfig config = 3;
}

message AddBiosphereS {
    // Indicates biosphere is:
    // 1. actually created (when !AddBiosphereQ.test_only)
    // 2. or creatable (when AddBiosphereQ.test_only)
    bool success = 1;

    // Description of the newly created biosphere (only valid when success is
    // true AND request is not test_only).
    BiosphereDesc biosphere_desc = 2;
}

enum BiosphereState {
    // Should never happen.
    UNKNOWN = 0;

    RUNNING = 1;
    STOPPED = 2;
    // Transition: STOPPED -> RUNNING.
    T_RUN = 3;
    // Transition: RUNNING -> STOPPED.
    T_STOP = 4;
}

// Next ID: 5
message BiosphereCreationConfig {
    string name = 1;

    // World size (in number of chunks). Hopefully these are applicable for
    // all relevant world topology.
    int32 nx = 2;
    int32 ny = 3;

    BiosphereEnvConfig env = 4;
}

// Immutable, reproducible initialization scheme of a biosphere.
// In most case, actual pattern is generated randomly.
// A given EnvConfig must be usable for any size of biosphere.
//
// Need to keep compatibility, since serialized EnvConfig is stored in datastore.
message BiosphereEnvConfig {
    // Randomness seed of this config. Result for same (nx, ny) must be same.
    // But there's no point in showing this parameter.
    int32 seed = 1;
}


message BiosphereDesc {
    uint64 biosphere_id = 1;

    // In UI, it is expected name is single-line, possible descriptive string.
    // e.g. "Biosphere:1/NoBC", "HelloBonsai22 - Guests should use this!"
    string name = 2;

    // How many cores this world is currently configured to use.
    uint32 num_cores = 3;

    // Current timestamp of the world.
    uint64 num_ticks = 4;

    BiosphereState state = 5;
}

message PolySoup {
    message Vertex {
        float px = 1;
        float py = 2;
        float pz = 3;

        float nx = 4;
        float ny = 5;
        float nz = 6;

        // LDR color in [0, 1].
        float r = 7;
        float g = 8;
        float b = 9;
    }

    // Shared vertices.
    repeated Vertex vertices = 1;

    // Indices of vertices of triangles.
    // Length must be multiple of 3.
    repeated uint32 indices = 2 [packed=true];
}

// This structure is permanent.
// Chunk is 1m * 1m * 10m volume.
message ChunkId {
    // Biosphere-selector.
    uint64 world_id = 1;
    int32 index_x = 2;
    int32 index_y = 3;
}
