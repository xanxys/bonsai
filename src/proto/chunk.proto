syntax="proto3";
// Proto that can be only used in frontend and chunk server.
// Since detail of physics should be known to client / fe, this file
// should only contain implementation details.
package api;
import "proto/common.proto";


service ChunkService {
    // Get generic status of the router.
    rpc Status(StatusQ) returns (StatusS);

    // Calculate a single step almost statelessly.
    rpc StepChunk(StepChunkQ) returns (StepChunkS);

    rpc GetChunk(GetChunkQ) returns (GetChunkS);
}

// Step once, using given data source and caches the result for a few minutes at least.
// All inputs must be available immediately, ohterwise this will fail.
message StepChunkQ {
    message Input {
        ChunkRel dp = 1;
        ChunkDataLocator data = 2;
    }
    // at most 9 chunks {(dx,dy) | |dx|<=1 && |dy|<=1} including (0, 0).
    // If omitted, existence of wall is assumed.
    // Duplicated (dx, dy) will result in undefined behavior.
    repeated Input chunk_input = 1;
}

message StepChunkS {
    // Inputs were successful gathered and stepping was properly done.
    bool success = 1;

    // Cache key of the stepped chunk at (0, 0). Only set when success == true.
    uint64 cache_key = 2;
}


message GetChunkQ {
  uint64 cache_key = 1;
}

message GetChunkS {
  // True if successfully available.
  // Non avail reason examples: cache expiration due to TTL, invalid key.
  bool success = 1;

  // Only set when success.
  ChunkState content = 2;
}


message StatusQ {
}

message StatusS {
    int64 num_chunk_cache = 4;
    reserved 1, 2, 3;
}


message ChunkState {
    // self (0,0) + outgoing (others)
    repeated ChunkShard shards = 1;
}

message ChunkShard {
    ChunkRel dp = 1;
    repeated Grain grains = 2;
}

message ChunkRel {
    int32 dx = 1;
    int32 dy = 2;
}


// Snapshot of a chunk at given timestamp.
// This contains enough and just enough information for reconstructing it on
// memory.
// Do not include optimization structures in this, since we don't want to break
// compatibility every time we optimize implemenetation.
//
// Serialization acts as validation of internal state.
//
// Coordinates are stored by chunk-local coordinates.
message ChunkSnapshot {
    // Should be negative for normal gravity.
    int32 gravity_z = 1;

    repeated Grain grains = 4;
    reserved 2, 3;
}




// Accessor of a chunk data.
// Chunk data = grains in a chunk + outgoing grains
// Next ID: 5
message ChunkDataLocator {
    // Where a chunk data is stored.
    oneof location {
        // Est latency: 1us-
        uint64 self_cache_key = 1;

        // Est latency: 1ms-
        RemoteChunkCache remote_cache_key = 2;

        // Est latency: 50ms-
        int64 datastore_key = 3;
    }
}

message RemoteChunkCache {
    // IP address where ChunkService is running.
    string ip = 1;

    // Chunk snapshot cache key in the node.
    uint64 cache_key = 2;
}



message ChunkTopology {
    // Opaque unique id of this chunk. Caller will make sure this is actually
    // unique across all biospheres.
    string chunk_id = 1;

    // Description of a neighbor chunk.
    // (dx, dy) != (0, 0) must hold.
    message ChunkNeighbor {
        // Neighbor's chunk id.
        string chunk_id = 1;

        // If true, neighbor is on the same node.
        bool internal = 2;

        // Chunk server IP address where neighbor is running.
        // Disregarded when internal is true.
        string address = 3;

        // Relative position of this neighbor to the newly created chunk.
        // must be relatively small (|dx| <= 1) for correct operation.
        int32 dx = 4;

        // Relative position of this neighbor to the newly created chunk.
        // must be relatively small (|dx| <= 1) for correct operation.
        int32 dy = 5;
    }

    // 8-Neighbors. When not specified, it is assumed that location is empty
    // (regardless of dx, dy) and there is wall between neighbor and this (when
    // neighbor is a 4-neighbor).
    repeated ChunkNeighbor neighbors = 2;
}


// Next Id: 6
message Grain {
    uint64 id = 3;

    CkPosition pos = 1;
    CkVelocity vel = 4;
    enum Kind {
        UNKNOWN = 0;
        WATER = 1;
        SOIL = 2;
        CELL = 3;
    }
    Kind kind = 2;

    // Available iff kind == CELL.
    CellProp cell_prop = 5;
}


// Unit: meter
message CkPosition {
    float x = 1;
    float y = 2;
    float z = 3;
}

// Unit: meter/sec
message CkVelocity {
    float x = 1;
    float y = 2;
    float z = 3;
}
